==4475== Memcheck, a memory error detector
==4475== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4475== Using Valgrind-3.12.0.SVN and LibVEX; rerun with -h for copyright info
==4475== Command: ./hkmeans fs.dat 2
==4475== 
--4475-- Valgrind options:
--4475--    --leak-check=full
--4475--    --show-reachable=yes
--4475--    --track-origins=yes
--4475--    -v
--4475-- Contents of /proc/version:
--4475--   Linux version 4.8.0-1-amd64 (debian-kernel@lists.debian.org) (gcc version 5.4.1 20161019 (Debian 5.4.1-3) ) #1 SMP Debian 4.8.7-1 (2016-11-13)
--4475-- 
--4475-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-rdtscp-sse3-avx
--4475-- Page sizes: currently 4096, max supported 4096
--4475-- Valgrind library directory: /usr/lib/valgrind
--4475-- Reading syms from /home/nutria/rafgh/kmeanscode/hkmeans
--4475-- Reading syms from /lib/x86_64-linux-gnu/ld-2.24.so
--4475--   Considering /usr/lib/debug/.build-id/12/5dab90a4cfa8edc5d532f583e08e810c232cd5.debug ..
--4475--   .. build-id is valid
--4475-- Reading syms from /usr/lib/valgrind/memcheck-amd64-linux
--4475--   Considering /usr/lib/valgrind/memcheck-amd64-linux ..
--4475--   .. CRC mismatch (computed db5b2ec5 wanted 0eae776b)
--4475--   Considering /usr/lib/debug/usr/lib/valgrind/memcheck-amd64-linux ..
--4475--   .. CRC is valid
--4475--    object doesn't have a dynamic symbol table
--4475-- Scheduler: using generic scheduler lock implementation.
--4475-- Reading suppressions file: /usr/lib/valgrind/default.supp
==4475== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-4475-by-nutria-on-???
==4475== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-4475-by-nutria-on-???
==4475== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-4475-by-nutria-on-???
==4475== 
==4475== TO CONTROL THIS PROCESS USING vgdb (which you probably
==4475== don't want to do, unless you know exactly what you're doing,
==4475== or are doing some strange experiment):
==4475==   /usr/lib/valgrind/../../bin/vgdb --pid=4475 ...command...
==4475== 
==4475== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==4475==   /path/to/gdb ./hkmeans
==4475== and then give GDB the following command
==4475==   target remote | /usr/lib/valgrind/../../bin/vgdb --pid=4475
==4475== --pid is optional if only one valgrind process is running
==4475== 
--4475-- REDIR: 0x401acf0 (ld-linux-x86-64.so.2:strlen) redirected to 0x3809de81 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--4475-- REDIR: 0x4019640 (ld-linux-x86-64.so.2:index) redirected to 0x3809de9b (vgPlain_amd64_linux_REDIR_FOR_index)
--4475-- Reading syms from /usr/lib/valgrind/vgpreload_core-amd64-linux.so
--4475--   Considering /usr/lib/valgrind/vgpreload_core-amd64-linux.so ..
--4475--   .. CRC mismatch (computed 74a069fa wanted 84d99202)
--4475--   Considering /usr/lib/debug/usr/lib/valgrind/vgpreload_core-amd64-linux.so ..
--4475--   .. CRC is valid
--4475-- Reading syms from /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so
--4475--   Considering /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so ..
--4475--   .. CRC mismatch (computed 88f2547e wanted 8a7a4459)
--4475--   Considering /usr/lib/debug/usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so ..
--4475--   .. CRC is valid
==4475== WARNING: new redirection conflicts with existing -- ignoring it
--4475--     old: 0x0401acf0 (strlen              ) R-> (0000.0) 0x3809de81 vgPlain_amd64_linux_REDIR_FOR_strlen
--4475--     new: 0x0401acf0 (strlen              ) R-> (2007.0) 0x04c2de60 strlen
--4475-- REDIR: 0x4019860 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4c2ef60 (strcmp)
--4475-- REDIR: 0x401b800 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4c32330 (mempcpy)
--4475-- Reading syms from /lib/x86_64-linux-gnu/libc-2.24.so
--4475--   Considering /usr/lib/debug/.build-id/c0/5201cc642f6b800835e811d7cb28f103aeb191.debug ..
--4475--   .. build-id is valid
--4475-- REDIR: 0x4ebb520 (libc.so.6:strcasecmp) redirected to 0x4a25740 (_vgnU_ifunc_wrapper)
--4475-- REDIR: 0x4eb6fd0 (libc.so.6:strcspn) redirected to 0x4a25740 (_vgnU_ifunc_wrapper)
--4475-- REDIR: 0x4ebd810 (libc.so.6:strncasecmp) redirected to 0x4a25740 (_vgnU_ifunc_wrapper)
--4475-- REDIR: 0x4eb9440 (libc.so.6:strpbrk) redirected to 0x4a25740 (_vgnU_ifunc_wrapper)
--4475-- REDIR: 0x4eb97d0 (libc.so.6:strspn) redirected to 0x4a25740 (_vgnU_ifunc_wrapper)
--4475-- REDIR: 0x4ebaba0 (libc.so.6:memmove) redirected to 0x4a25740 (_vgnU_ifunc_wrapper)
--4475-- REDIR: 0x4eb9150 (libc.so.6:rindex) redirected to 0x4c2d7f0 (rindex)
--4475-- REDIR: 0x4eb1d40 (libc.so.6:malloc) redirected to 0x4c2ab40 (malloc)
--4475-- REDIR: 0x4eb9d70 (libc.so.6:__GI_strstr) redirected to 0x4c32590 (__strstr_sse2)
--4475-- REDIR: 0x4eb2730 (libc.so.6:calloc) redirected to 0x4c2cb10 (calloc)
--4475-- REDIR: 0x4eb7470 (libc.so.6:strlen) redirected to 0x4c2dda0 (strlen)
--4475-- REDIR: 0x4eb23f0 (libc.so.6:realloc) redirected to 0x4c2cd50 (realloc)
--4475-- REDIR: 0x4eb2340 (libc.so.6:free) redirected to 0x4c2bd70 (free)
--4475-- REDIR: 0x4ec1520 (libc.so.6:strchrnul) redirected to 0x4c31e60 (strchrnul)
--4475-- REDIR: 0x4ebac90 (libc.so.6:__GI_mempcpy) redirected to 0x4c32060 (__GI_mempcpy)
--4475-- REDIR: 0x4ebacb0 (libc.so.6:memcpy@GLIBC_2.2.5) redirected to 0x4c2f0c0 (memcpy@GLIBC_2.2.5)
--4475-- REDIR: 0x4eb6eb0 (libc.so.6:strcpy) redirected to 0x4a25740 (_vgnU_ifunc_wrapper)
--4475-- REDIR: 0x4ecaf80 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4c2de80 (strcpy)
==4475== Invalid read of size 8
==4475==    at 0x10A38B: firstgo (hkmeans.c:270)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8070 is 16 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid read of size 8
==4475==    at 0x10A3C1: firstgo (hkmeans.c:270)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8068 is 8 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid read of size 8
==4475==    at 0x10A433: firstgo (hkmeans.c:271)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8068 is 8 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid write of size 8
==4475==    at 0x10A43B: firstgo (hkmeans.c:271)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8068 is 8 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid read of size 8
==4475==    at 0x10A4A4: firstgo (hkmeans.c:272)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8078 is 24 bytes after a block of size 80 in arena "client"
==4475== 
==4475== Invalid free() / delete / delete[] / realloc()
==4475==    at 0x4C2CDCF: realloc (vg_replace_malloc.c:785)
==4475==    by 0x10A4B4: firstgo (hkmeans.c:272)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x90 is not stack'd, malloc'd or (recently) free'd
==4475== 
==4475== Invalid write of size 8
==4475==    at 0x10A4B5: firstgo (hkmeans.c:272)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8078 is 24 bytes after a block of size 80 in arena "client"
==4475== 
==4475== Invalid read of size 8
==4475==    at 0x10A51E: firstgo (hkmeans.c:273)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8060 is 0 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid write of size 8
==4475==    at 0x10A52E: firstgo (hkmeans.c:273)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8060 is 0 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid read of size 8
==4475==    at 0x10A563: firstgo (hkmeans.c:274)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8068 is 8 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid read of size 8
==4475==    at 0x10A60A: firstgo (hkmeans.c:274)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8068 is 8 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid read of size 8
==4475==    at 0x10A5A1: firstgo (hkmeans.c:275)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8060 is 0 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid write of size 8
==4475==    at 0x10A5CB: firstgo (hkmeans.c:275)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d85a8 is 0 bytes after a block of size 8 alloc'd
==4475==    at 0x4C2AADF: malloc (vg_replace_malloc.c:298)
==4475==    by 0x4C2CE5F: realloc (vg_replace_malloc.c:785)
==4475==    by 0x10A52D: firstgo (hkmeans.c:273)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475== 
==4475== Invalid read of size 8
==4475==    at 0x10A65F: firstgo (hkmeans.c:278)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8060 is 0 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 
==4475== Invalid read of size 8
==4475==    at 0x10A694: firstgo (hkmeans.c:278)
==4475==    by 0x10B362: main (hkmeans.c:388)
==4475==  Address 0x51d8070 is 16 bytes after a block of size 80 alloc'd
==4475==    at 0x4C2ABAF: malloc (vg_replace_malloc.c:299)
==4475==    by 0x1099CC: creac_t (hkmeans.c:157)
==4475==    by 0x10B347: main (hkmeans.c:386)
==4475== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 144, hi = 0.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==4475==    at 0x38083828: show_sched_status_wrk (m_libcassert.c:343)
==4475==    by 0x38083944: report_and_quit (m_libcassert.c:419)
==4475==    by 0x38083AD1: vgPlain_assert_fail (m_libcassert.c:485)
==4475==    by 0x38091394: get_bszB_as_is (m_mallocfree.c:301)
==4475==    by 0x38091394: get_bszB (m_mallocfree.c:311)
==4475==    by 0x38091394: get_pszB (m_mallocfree.c:385)
==4475==    by 0x38091394: vgPlain_describe_arena_addr (m_mallocfree.c:1527)
==4475==    by 0x3807CF23: vgPlain_describe_addr (m_addrinfo.c:186)
==4475==    by 0x3807B7A3: vgMemCheck_update_Error_extra (mc_errors.c:1141)
==4475==    by 0x3807F9DA: vgPlain_maybe_record_error (m_errormgr.c:813)
==4475==    by 0x3807AD3A: vgMemCheck_record_address_error (mc_errors.c:760)
==4475==    by 0x3805824E: mc_LOADVn_slow (mc_main.c:1465)
==4475==    by 0x80988ECD4: ???
==4475==    by 0x808CA9F2F: ???
==4475==    by 0x80200854F: ???
==4475==    by 0xFFEFFF5AF: ???
==4475==    by 0x80200854F: ???
==4475==    by 0x1BFF: ???
==4475==    by 0x808CACFFF: ??? (in /tmp/vgdb-pipe-shared-mem-vgdb-4475-by-nutria-on-???)
==4475==    by 0x808CA9DBF: ???
==4475==    by 0x1543D: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 4475)
==4475==    at 0x10A6DF: firstgo (hkmeans.c:279)
==4475==    by 0x10B362: main (hkmeans.c:388)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

